syntax = "proto3";
package srdtrk.linkedpackets.v1;

option go_package = "github.com/srdtrk/linkedpackets";

import "srdtrk/linkedpackets/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Msg defines the module Msg service.
service Query {
  // LinkEnabledChannel returns whether the channel allows linked packets or not.
  rpc LinkEnabledChannel(QueryLinkEnabledChannelRequest) returns (QueryLinkEnabledChannelResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/srdtrk/linkedpackets/v1/channels/{channel_id}/ports/{port_id}/link_enabled";
  }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/srdtrk/linkedpackets/v1/params";
  }
}

// QueryLinkEnabledChannelRequest is the request type for the Query/LinkEnabledChannel RPC
// method.
message QueryLinkEnabledChannelRequest {
  // unique port identifier
  string port_id = 1;
  // unique channel identifier
  string channel_id = 2;
}

// QueryLinkEnabledChannelResponse is the response type for the Query/LinkEnabledChannel RPC
// method.
message QueryLinkEnabledChannelResponse {
  // boolean flag representing the link enabled channel status
  bool link_enabled = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
